import net from 'net';
import { EventEmitter } from 'events';
import SMTPSession from './SMTPSession.js';
import handleCommands from './commands/CommandHandler.js';
import os from 'os';

const server = net.createServer((socket) => {
  const eventEmitter = new EventEmitter();
  const session = new SMTPSession(socket,eventEmitter);

  // Initialize command handlers
  handleCommands(eventEmitter);

  // Greet the client
  session.send(`${session.greeting} ESMTP`,220);

  // Handle incoming data
  socket.on('data', (data) => {
    const message = data.toString().trim();
    console.log(`Received message from ${session.clientIP}: ${message}`);

    // Emit a generic command event
    eventEmitter.emit('command', message, session);
  });

  socket.on('end', () => {
    console.log(`Connection with ${session.clientIP} ended.`);
  });

  socket.on('error', (err) => {
    console.error(`Error occurred with ${session.clientIP}: ${err.message}`);
  });

  eventEmitter.on('terminate', () => {
    session.send( 'Closing connection', 500);
    socket.end();
  });
});

const PORT = 2525; // Common SMTP port for testing
server.listen(PORT, () => {
  console.log(`SMTP Server listening on port ${PORT}`);
});
